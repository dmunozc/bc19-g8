var cov_2by3hy4vyj=function(){var path="C:\\Users\\Bandesh\\CS554\\bc19-g8\\bots\\resource_test.js";var hash="661ec1f1b9ef91e8afdcf7033a82e54d0584bf4b";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Bandesh\\CS554\\bc19-g8\\bots\\resource_test.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:50}},"1":{start:{line:14,column:0},end:{line:39,column:1}},"2":{start:{line:16,column:15},end:{line:16,column:17}},"3":{start:{line:17,column:18},end:{line:17,column:30}},"4":{start:{line:19,column:2},end:{line:37,column:3}},"5":{start:{line:20,column:15},end:{line:20,column:27}},"6":{start:{line:21,column:4},end:{line:21,column:27}},"7":{start:{line:22,column:4},end:{line:24,column:5}},"8":{start:{line:23,column:6},end:{line:23,column:24}},"9":{start:{line:25,column:18},end:{line:25,column:51}},"10":{start:{line:28,column:4},end:{line:36,column:5}},"11":{start:{line:28,column:17},end:{line:28,column:18}},"12":{start:{line:29,column:6},end:{line:35,column:7}},"13":{start:{line:30,column:8},end:{line:34,column:9}},"14":{start:{line:30,column:21},end:{line:30,column:22}},"15":{start:{line:31,column:10},end:{line:33,column:11}},"16":{start:{line:32,column:12},end:{line:32,column:35}},"17":{start:{line:38,column:2},end:{line:38,column:16}},"18":{start:{line:51,column:0},end:{line:63,column:1}},"19":{start:{line:52,column:2},end:{line:54,column:3}},"20":{start:{line:53,column:4},end:{line:53,column:17}},"21":{start:{line:55,column:19},end:{line:55,column:51}},"22":{start:{line:56,column:2},end:{line:61,column:3}},"23":{start:{line:56,column:15},end:{line:56,column:16}},"24":{start:{line:57,column:15},end:{line:57,column:106}},"25":{start:{line:58,column:4},end:{line:60,column:5}},"26":{start:{line:59,column:6},end:{line:59,column:18}},"27":{start:{line:62,column:2},end:{line:62,column:15}},"28":{start:{line:81,column:0},end:{line:91,column:1}},"29":{start:{line:83,column:21},end:{line:83,column:23}},"30":{start:{line:84,column:14},end:{line:84,column:49}},"31":{start:{line:85,column:2},end:{line:89,column:3}},"32":{start:{line:85,column:15},end:{line:85,column:16}},"33":{start:{line:86,column:4},end:{line:88,column:5}},"34":{start:{line:87,column:6},end:{line:87,column:34}},"35":{start:{line:90,column:2},end:{line:90,column:22}},"36":{start:{line:102,column:0},end:{line:111,column:1}},"37":{start:{line:104,column:14},end:{line:104,column:15}},"38":{start:{line:105,column:2},end:{line:109,column:3}},"39":{start:{line:105,column:15},end:{line:105,column:16}},"40":{start:{line:106,column:4},end:{line:108,column:5}},"41":{start:{line:107,column:6},end:{line:107,column:14}},"42":{start:{line:110,column:2},end:{line:110,column:15}},"43":{start:{line:124,column:0},end:{line:135,column:1}},"44":{start:{line:126,column:15},end:{line:126,column:17}},"45":{start:{line:127,column:4},end:{line:133,column:5}},"46":{start:{line:127,column:17},end:{line:127,column:18}},"47":{start:{line:128,column:8},end:{line:132,column:9}},"48":{start:{line:128,column:21},end:{line:128,column:22}},"49":{start:{line:129,column:12},end:{line:131,column:13}},"50":{start:{line:130,column:16},end:{line:130,column:67}},"51":{start:{line:134,column:4},end:{line:134,column:16}},"52":{start:{line:153,column:0},end:{line:165,column:1}},"53":{start:{line:155,column:19},end:{line:155,column:27}},"54":{start:{line:157,column:4},end:{line:163,column:5}},"55":{start:{line:157,column:17},end:{line:157,column:18}},"56":{start:{line:158,column:19},end:{line:158,column:80}},"57":{start:{line:159,column:8},end:{line:162,column:9}},"58":{start:{line:160,column:12},end:{line:160,column:28}},"59":{start:{line:161,column:12},end:{line:161,column:22}},"60":{start:{line:164,column:4},end:{line:164,column:23}},"61":{start:{line:179,column:0},end:{line:191,column:1}},"62":{start:{line:181,column:4},end:{line:189,column:5}},"63":{start:{line:181,column:17},end:{line:181,column:18}},"64":{start:{line:182,column:19},end:{line:182,column:80}},"65":{start:{line:183,column:8},end:{line:183,column:28}},"66":{start:{line:184,column:8},end:{line:188,column:9}},"67":{start:{line:184,column:21},end:{line:184,column:22}},"68":{start:{line:185,column:12},end:{line:187,column:13}},"69":{start:{line:186,column:16},end:{line:186,column:37}},"70":{start:{line:190,column:4},end:{line:190,column:48}},"71":{start:{line:190,column:31},end:{line:190,column:46}},"72":{start:{line:210,column:0},end:{line:220,column:1}},"73":{start:{line:212,column:16},end:{line:212,column:22}},"74":{start:{line:213,column:4},end:{line:218,column:5}},"75":{start:{line:213,column:17},end:{line:213,column:18}},"76":{start:{line:214,column:8},end:{line:217,column:9}},"77":{start:{line:215,column:12},end:{line:215,column:22}},"78":{start:{line:216,column:12},end:{line:216,column:18}},"79":{start:{line:219,column:4},end:{line:219,column:23}},"80":{start:{line:236,column:0},end:{line:256,column:1}},"81":{start:{line:238,column:19},end:{line:238,column:28}},"82":{start:{line:239,column:14},end:{line:239,column:36}},"83":{start:{line:241,column:4},end:{line:254,column:5}},"84":{start:{line:242,column:8},end:{line:251,column:9}},"85":{start:{line:242,column:21},end:{line:242,column:22}},"86":{start:{line:243,column:12},end:{line:250,column:13}},"87":{start:{line:245,column:27},end:{line:245,column:88}},"88":{start:{line:246,column:16},end:{line:249,column:17}},"89":{start:{line:247,column:20},end:{line:247,column:36}},"90":{start:{line:248,column:20},end:{line:248,column:30}},"91":{start:{line:252,column:8},end:{line:252,column:30}},"92":{start:{line:253,column:8},end:{line:253,column:30}},"93":{start:{line:255,column:4},end:{line:255,column:15}},"94":{start:{line:269,column:0},end:{line:295,column:1}},"95":{start:{line:273,column:28},end:{line:273,column:35}},"96":{start:{line:274,column:2},end:{line:285,column:3}},"97":{start:{line:275,column:4},end:{line:281,column:5}},"98":{start:{line:276,column:6},end:{line:280,column:7}},"99":{start:{line:277,column:8},end:{line:277,column:35}},"100":{start:{line:278,column:8},end:{line:278,column:35}},"101":{start:{line:279,column:8},end:{line:279,column:14}},"102":{start:{line:282,column:4},end:{line:284,column:5}},"103":{start:{line:283,column:6},end:{line:283,column:12}},"104":{start:{line:286,column:23},end:{line:286,column:97}},"105":{start:{line:287,column:22},end:{line:287,column:96}},"106":{start:{line:288,column:2},end:{line:290,column:3}},"107":{start:{line:289,column:4},end:{line:289,column:13}},"108":{start:{line:291,column:2},end:{line:293,column:3}},"109":{start:{line:292,column:4},end:{line:292,column:13}},"110":{start:{line:294,column:2},end:{line:294,column:12}},"111":{start:{line:312,column:0},end:{line:322,column:1}},"112":{start:{line:314,column:15},end:{line:314,column:17}},"113":{start:{line:315,column:13},end:{line:315,column:51}},"114":{start:{line:316,column:2},end:{line:320,column:3}},"115":{start:{line:317,column:4},end:{line:317,column:54}},"116":{start:{line:318,column:8},end:{line:320,column:3}},"117":{start:{line:319,column:4},end:{line:319,column:54}},"118":{start:{line:321,column:2},end:{line:321,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:24},end:{line:14,column:25}},loc:{start:{line:14,column:64},end:{line:39,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:51,column:25},end:{line:51,column:26}},loc:{start:{line:51,column:72},end:{line:63,column:1}},line:51},"2":{name:"(anonymous_2)",decl:{start:{line:81,column:28},end:{line:81,column:29}},loc:{start:{line:81,column:60},end:{line:91,column:1}},line:81},"3":{name:"(anonymous_3)",decl:{start:{line:102,column:30},end:{line:102,column:31}},loc:{start:{line:102,column:52},end:{line:111,column:1}},line:102},"4":{name:"(anonymous_4)",decl:{start:{line:124,column:29},end:{line:124,column:30}},loc:{start:{line:124,column:42},end:{line:135,column:1}},line:124},"5":{name:"(anonymous_5)",decl:{start:{line:153,column:28},end:{line:153,column:29}},loc:{start:{line:153,column:46},end:{line:165,column:1}},line:153},"6":{name:"(anonymous_6)",decl:{start:{line:179,column:23},end:{line:179,column:24}},loc:{start:{line:179,column:49},end:{line:191,column:1}},line:179},"7":{name:"(anonymous_7)",decl:{start:{line:190,column:21},end:{line:190,column:22}},loc:{start:{line:190,column:31},end:{line:190,column:46}},line:190},"8":{name:"(anonymous_8)",decl:{start:{line:210,column:39},end:{line:210,column:40}},loc:{start:{line:210,column:57},end:{line:220,column:1}},line:210},"9":{name:"(anonymous_9)",decl:{start:{line:236,column:28},end:{line:236,column:29}},loc:{start:{line:236,column:51},end:{line:256,column:1}},line:236},"10":{name:"(anonymous_10)",decl:{start:{line:269,column:31},end:{line:269,column:32}},loc:{start:{line:269,column:52},end:{line:295,column:1}},line:269},"11":{name:"(anonymous_11)",decl:{start:{line:312,column:41},end:{line:312,column:42}},loc:{start:{line:312,column:73},end:{line:322,column:1}},line:312}},branchMap:{"0":{loc:{start:{line:22,column:4},end:{line:24,column:5}},type:"if",locations:[{start:{line:22,column:4},end:{line:24,column:5}},{start:{line:22,column:4},end:{line:24,column:5}}],line:22},"1":{loc:{start:{line:29,column:6},end:{line:35,column:7}},type:"if",locations:[{start:{line:29,column:6},end:{line:35,column:7}},{start:{line:29,column:6},end:{line:35,column:7}}],line:29},"2":{loc:{start:{line:31,column:10},end:{line:33,column:11}},type:"if",locations:[{start:{line:31,column:10},end:{line:33,column:11}},{start:{line:31,column:10},end:{line:33,column:11}}],line:31},"3":{loc:{start:{line:31,column:14},end:{line:31,column:80}},type:"binary-expr",locations:[{start:{line:31,column:14},end:{line:31,column:45}},{start:{line:31,column:49},end:{line:31,column:80}}],line:31},"4":{loc:{start:{line:52,column:2},end:{line:54,column:3}},type:"if",locations:[{start:{line:52,column:2},end:{line:54,column:3}},{start:{line:52,column:2},end:{line:54,column:3}}],line:52},"5":{loc:{start:{line:52,column:6},end:{line:52,column:45}},type:"binary-expr",locations:[{start:{line:52,column:6},end:{line:52,column:25}},{start:{line:52,column:29},end:{line:52,column:45}}],line:52},"6":{loc:{start:{line:58,column:4},end:{line:60,column:5}},type:"if",locations:[{start:{line:58,column:4},end:{line:60,column:5}},{start:{line:58,column:4},end:{line:60,column:5}}],line:58},"7":{loc:{start:{line:86,column:4},end:{line:88,column:5}},type:"if",locations:[{start:{line:86,column:4},end:{line:88,column:5}},{start:{line:86,column:4},end:{line:88,column:5}}],line:86},"8":{loc:{start:{line:106,column:4},end:{line:108,column:5}},type:"if",locations:[{start:{line:106,column:4},end:{line:108,column:5}},{start:{line:106,column:4},end:{line:108,column:5}}],line:106},"9":{loc:{start:{line:129,column:12},end:{line:131,column:13}},type:"if",locations:[{start:{line:129,column:12},end:{line:131,column:13}},{start:{line:129,column:12},end:{line:131,column:13}}],line:129},"10":{loc:{start:{line:159,column:8},end:{line:162,column:9}},type:"if",locations:[{start:{line:159,column:8},end:{line:162,column:9}},{start:{line:159,column:8},end:{line:162,column:9}}],line:159},"11":{loc:{start:{line:185,column:12},end:{line:187,column:13}},type:"if",locations:[{start:{line:185,column:12},end:{line:187,column:13}},{start:{line:185,column:12},end:{line:187,column:13}}],line:185},"12":{loc:{start:{line:185,column:16},end:{line:185,column:72}},type:"binary-expr",locations:[{start:{line:185,column:16},end:{line:185,column:42}},{start:{line:185,column:46},end:{line:185,column:72}}],line:185},"13":{loc:{start:{line:214,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:214,column:8},end:{line:217,column:9}},{start:{line:214,column:8},end:{line:217,column:9}}],line:214},"14":{loc:{start:{line:214,column:12},end:{line:214,column:70}},type:"binary-expr",locations:[{start:{line:214,column:12},end:{line:214,column:31}},{start:{line:214,column:35},end:{line:214,column:54}},{start:{line:214,column:58},end:{line:214,column:70}}],line:214},"15":{loc:{start:{line:241,column:4},end:{line:254,column:5}},type:"if",locations:[{start:{line:241,column:4},end:{line:254,column:5}},{start:{line:241,column:4},end:{line:254,column:5}}],line:241},"16":{loc:{start:{line:243,column:12},end:{line:250,column:13}},type:"if",locations:[{start:{line:243,column:12},end:{line:250,column:13}},{start:{line:243,column:12},end:{line:250,column:13}}],line:243},"17":{loc:{start:{line:246,column:16},end:{line:249,column:17}},type:"if",locations:[{start:{line:246,column:16},end:{line:249,column:17}},{start:{line:246,column:16},end:{line:249,column:17}}],line:246},"18":{loc:{start:{line:276,column:6},end:{line:280,column:7}},type:"if",locations:[{start:{line:276,column:6},end:{line:280,column:7}},{start:{line:276,column:6},end:{line:280,column:7}}],line:276},"19":{loc:{start:{line:282,column:4},end:{line:284,column:5}},type:"if",locations:[{start:{line:282,column:4},end:{line:284,column:5}},{start:{line:282,column:4},end:{line:284,column:5}}],line:282},"20":{loc:{start:{line:282,column:7},end:{line:282,column:84}},type:"binary-expr",locations:[{start:{line:282,column:7},end:{line:282,column:29}},{start:{line:282,column:33},end:{line:282,column:55}},{start:{line:282,column:59},end:{line:282,column:84}}],line:282},"21":{loc:{start:{line:288,column:2},end:{line:290,column:3}},type:"if",locations:[{start:{line:288,column:2},end:{line:290,column:3}},{start:{line:288,column:2},end:{line:290,column:3}}],line:288},"22":{loc:{start:{line:291,column:2},end:{line:293,column:3}},type:"if",locations:[{start:{line:291,column:2},end:{line:293,column:3}},{start:{line:291,column:2},end:{line:293,column:3}}],line:291},"23":{loc:{start:{line:316,column:2},end:{line:320,column:3}},type:"if",locations:[{start:{line:316,column:2},end:{line:320,column:3}},{start:{line:316,column:2},end:{line:320,column:3}}],line:316},"24":{loc:{start:{line:318,column:8},end:{line:320,column:3}},type:"if",locations:[{start:{line:318,column:8},end:{line:320,column:3}},{start:{line:318,column:8},end:{line:320,column:3}}],line:318}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var movement=(cov_2by3hy4vyj.s[0]++,require('../bots/movement_test.js'));/**
 * This function finds clusters of resources.
 * 
 * @param {list} resources  a list of objects with x and y parameters 
 * @param {list} friendly_locs  a list of objects with x and y properties (set
 *                              to 0 if you do not want this)
 * @param {list} enemy_locs a list of objects with x and y properties (set to
 *                           0 if you do not want this)
 * 
 * @returns {list} a list of objects with x and y properties.
 */cov_2by3hy4vyj.s[1]++;exports.find_clusters=function(list,friendly_locs,enemy_locs){cov_2by3hy4vyj.f[0]++;var result=(cov_2by3hy4vyj.s[2]++,[]);var resources=(cov_2by3hy4vyj.s[3]++,list.slice());cov_2by3hy4vyj.s[4]++;while(resources.length>0){var curr=(cov_2by3hy4vyj.s[5]++,resources[0]);cov_2by3hy4vyj.s[6]++;resources.splice(0,1);cov_2by3hy4vyj.s[7]++;if(!this.check_clusters(curr,friendly_locs,enemy_locs)){cov_2by3hy4vyj.b[0][0]++;cov_2by3hy4vyj.s[8]++;result.push(curr);}else{cov_2by3hy4vyj.b[0][1]++;}var updated=(cov_2by3hy4vyj.s[9]++,this.update_nodes(curr,list,[]));cov_2by3hy4vyj.s[10]++;for(var i=(cov_2by3hy4vyj.s[11]++,0);i<updated.length;i++){cov_2by3hy4vyj.s[12]++;if(updated[i].dist<=5){cov_2by3hy4vyj.b[1][0]++;cov_2by3hy4vyj.s[13]++;for(var j=(cov_2by3hy4vyj.s[14]++,0);j<resources.length;j++){cov_2by3hy4vyj.s[15]++;if((cov_2by3hy4vyj.b[3][0]++,resources[j].x===updated[i].x)&&(cov_2by3hy4vyj.b[3][1]++,resources[j].y===updated[i].y)){cov_2by3hy4vyj.b[2][0]++;cov_2by3hy4vyj.s[16]++;resources.splice(j,1);}else{cov_2by3hy4vyj.b[2][1]++;}}}else{cov_2by3hy4vyj.b[1][1]++;}}}cov_2by3hy4vyj.s[17]++;return result;};/**
 * Checks to see if the resource is a cluster near friendly or
 * enemy castles.
 * 
 * @param {object} resource_loc 
 * @param {list} friendly_locs 
 * @param {list} enemy_locs
 * 
 * @returns {boolean} 
 */cov_2by3hy4vyj.s[18]++;exports.check_clusters=function(resource_loc,friendly_locs,enemy_locs){cov_2by3hy4vyj.f[1]++;cov_2by3hy4vyj.s[19]++;if((cov_2by3hy4vyj.b[5][0]++,friendly_locs===0)&&(cov_2by3hy4vyj.b[5][1]++,enemy_locs===0)){cov_2by3hy4vyj.b[4][0]++;cov_2by3hy4vyj.s[20]++;return false;}else{cov_2by3hy4vyj.b[4][1]++;}var total_locs=(cov_2by3hy4vyj.s[21]++,friendly_locs.concat(enemy_locs));cov_2by3hy4vyj.s[22]++;for(var i=(cov_2by3hy4vyj.s[23]++,0);i<total_locs.length;i++){var dist=(cov_2by3hy4vyj.s[24]++,movement.get_distance([resource_loc.x,resource_loc.y],[total_locs[i].x,total_locs[i].y]));cov_2by3hy4vyj.s[25]++;if(dist<=5){cov_2by3hy4vyj.b[6][0]++;cov_2by3hy4vyj.s[26]++;return true;}else{cov_2by3hy4vyj.b[6][1]++;}}cov_2by3hy4vyj.s[27]++;return false;};/**
 * This function is used to find nearby nodes for the castle so that it knows
 * how many pilgrims to make
 * 
 * @requires resource.update_nodes();
 * 
 * example usage:
 *  var nearby_nodes = resource.find_nearby_nodes(curr_loc, resources, visbile, 10);
 * 
 * @param {object} loc  current location of castle, object with x and y properties 
 * @param {list}  list  list of resources (fuel and/or karb)
 * @param {list}  visible   list of visible units (used for dependant function)
 * @param {int}   range   the vision range
 * 
 * @returns {list}  returns a list of nodes in the vision range
 */cov_2by3hy4vyj.s[28]++;exports.find_nearby_nodes=function(loc,list,visible,range){cov_2by3hy4vyj.f[2]++;var nearby_nodes=(cov_2by3hy4vyj.s[29]++,[]);var nodes=(cov_2by3hy4vyj.s[30]++,this.update_nodes(loc,list,visible));cov_2by3hy4vyj.s[31]++;for(var i=(cov_2by3hy4vyj.s[32]++,0);i<nodes.length;i++){cov_2by3hy4vyj.s[33]++;if(nodes[i].dist<=range){cov_2by3hy4vyj.b[7][0]++;cov_2by3hy4vyj.s[34]++;nearby_nodes.push(nodes[i]);}else{cov_2by3hy4vyj.b[7][1]++;}}cov_2by3hy4vyj.s[35]++;return nearby_nodes;};/**
 * This function is used to see how many pilgrims are in vision range.
 * Used by castle to update pilgrim counts.
 * 
 * @param {list} visible  list of visible units
 * @param {int} unit  number of unit to retrieve
 * 
 * @returns {int} returns a count of unit
 */cov_2by3hy4vyj.s[36]++;exports.get_number_of_units=function(visible,unit){cov_2by3hy4vyj.f[3]++;var count=(cov_2by3hy4vyj.s[37]++,0);cov_2by3hy4vyj.s[38]++;for(var i=(cov_2by3hy4vyj.s[39]++,0);i<visible.length;i++){cov_2by3hy4vyj.s[40]++;if(visible[i].unit===unit){cov_2by3hy4vyj.b[8][0]++;cov_2by3hy4vyj.s[41]++;count++;}else{cov_2by3hy4vyj.b[8][1]++;}}cov_2by3hy4vyj.s[42]++;return count;};/**
 * Takes a 2D map grid and returns a list of objects with
 * x and y coordinates wherever the map has true.
 * 
 * example usage:
 *  var karbonite = resource.get_resource_nodes(this.getKarboniteMap());
 * 
 * @param {boolean} map   a 2D array of booleans
 * 
 * @returns {list}    a list of objects with x and y coordinates, dist and free
 *                      properties.
 */cov_2by3hy4vyj.s[43]++;exports.get_resource_nodes=function(map){cov_2by3hy4vyj.f[4]++;var list=(cov_2by3hy4vyj.s[44]++,[]);cov_2by3hy4vyj.s[45]++;for(var i=(cov_2by3hy4vyj.s[46]++,0);i<map.length;i++){cov_2by3hy4vyj.s[47]++;for(var j=(cov_2by3hy4vyj.s[48]++,0);j<map[0].length;j++){cov_2by3hy4vyj.s[49]++;if(map[i][j]===true){cov_2by3hy4vyj.b[9][0]++;cov_2by3hy4vyj.s[50]++;list.push({'x':j,'y':i,'dist':0,'free':true});}else{cov_2by3hy4vyj.b[9][1]++;}}}cov_2by3hy4vyj.s[51]++;return list;};/**
 * Returns an item on a list that is closest to provided
 * location.
 * 
 * @requires    movement.get_distance()
 * 
 * example usage:
 *  var nearest_karb = resource.find_nearest_unoccupied_node(curr_loc, resources);
 * 
 * @param {object} loc  a object with x and y coordinates 
 * @param {list} list   a list of objects with x and y coordinates, dist and free
 *                          properties.
 * 
 * @returns {object}    an object with x and y coordinates, dist and free properties.
 */cov_2by3hy4vyj.s[52]++;exports.find_nearest_node=function(loc,list){cov_2by3hy4vyj.f[5]++;var min_dist=(cov_2by3hy4vyj.s[53]++,10000000);var index;cov_2by3hy4vyj.s[54]++;for(var i=(cov_2by3hy4vyj.s[55]++,0);i<list.length;i++){var dist=(cov_2by3hy4vyj.s[56]++,movement.get_distance([loc.x,loc.y],[list[i].x,list[i].y]));cov_2by3hy4vyj.s[57]++;if(dist<min_dist){cov_2by3hy4vyj.b[10][0]++;cov_2by3hy4vyj.s[58]++;min_dist=dist;cov_2by3hy4vyj.s[59]++;index=i;}else{cov_2by3hy4vyj.b[10][1]++;}}cov_2by3hy4vyj.s[60]++;return list[index];};/**
 * Adds distance to each dist property on the list and updates the free property
 * 
 * example usage:
 *  var karbonite = resource.update_nodes(curr_loc, resources, visible);
 * 
 * @param {object} loc   an object with x and y coordinates 
 * @param {list} list  a list of objects with x, y, dist, and free properties
 * @param {list} visible   a list of robot objects
 * 
 * @returns {list}  a list of objects with x, y, dist, and free properties sorted by dist
 *                   from the loc x and y coordinates(closest will be first)
 */cov_2by3hy4vyj.s[61]++;exports.update_nodes=function(loc,list,visible){cov_2by3hy4vyj.f[6]++;cov_2by3hy4vyj.s[62]++;for(var i=(cov_2by3hy4vyj.s[63]++,0);i<list.length;i++){var dist=(cov_2by3hy4vyj.s[64]++,movement.get_distance([loc.x,loc.y],[list[i].x,list[i].y]));cov_2by3hy4vyj.s[65]++;list[i].dist=dist;cov_2by3hy4vyj.s[66]++;for(var j=(cov_2by3hy4vyj.s[67]++,0);j<visible.length;j++){cov_2by3hy4vyj.s[68]++;if((cov_2by3hy4vyj.b[12][0]++,visible[j].x===list[i].x)&&(cov_2by3hy4vyj.b[12][1]++,visible[j].y===list[i].y)){cov_2by3hy4vyj.b[11][0]++;cov_2by3hy4vyj.s[69]++;list[i].free=false;}else{cov_2by3hy4vyj.b[11][1]++;}}}cov_2by3hy4vyj.s[70]++;return list.sort((a,b)=>{cov_2by3hy4vyj.f[7]++;cov_2by3hy4vyj.s[71]++;return a.dist-b.dist;});};/**
 * Finds the nearest unoccupied coordinate from supplied location
 * Requires a call to this.update_nodes first.
 * 
 * example usage:
 *  var karbonite = resource.this.update_nodes(curr_loc, resources, visible);
 *  var nearest_karb = resource.find_nearest_unoccupied_node(curr_loc, resources);
 * 
 * @param {object} loc  an object with x and y coordinates 
 * @param {list} list   a sorted list of objects with x, y, dist, and free properties, 
 *                      sorted by closest dist to loc first.
 * 
 * @returns {object}    an object with x, y, dist, and free properties closest to the
 *                          loc provided (may also be the same location unit is on if
 *                          it is on a resource node)
 */cov_2by3hy4vyj.s[72]++;exports.find_nearest_unoccupied_node=function(loc,list){cov_2by3hy4vyj.f[8]++;var index=(cov_2by3hy4vyj.s[73]++,100000);cov_2by3hy4vyj.s[74]++;for(var i=(cov_2by3hy4vyj.s[75]++,0);i<list.length;i++){cov_2by3hy4vyj.s[76]++;if((cov_2by3hy4vyj.b[14][0]++,list[i].x===loc.x)&&(cov_2by3hy4vyj.b[14][1]++,list[i].y===loc.y)||(cov_2by3hy4vyj.b[14][2]++,list[i].free)){cov_2by3hy4vyj.b[13][0]++;cov_2by3hy4vyj.s[77]++;index=i;cov_2by3hy4vyj.s[78]++;break;}else{cov_2by3hy4vyj.b[13][1]++;}}cov_2by3hy4vyj.s[79]++;return list[index];};/**
 * Finds nearest unit of specified type.
 * 
 * @requires movement.get_distance()
 * 
 * example usage:
 *  var nearest_castle = resource.find_nearest_unit(curr_loc, visible, 0);
 * 
 * @param {object} loc  object with x and y properties 
 * @param {list} list   a list of visible robot objects 
 * @param {int} type    integer representing unit type (0 for castle, 1 for church...)
 * 
 * @returns {object}    object with x and y properties.
 */cov_2by3hy4vyj.s[80]++;exports.find_nearest_unit=function(loc,list,type){cov_2by3hy4vyj.f[9]++;var min_dist=(cov_2by3hy4vyj.s[81]++,100000000);var res=(cov_2by3hy4vyj.s[82]++,{'x':loc.x,'y':loc.y});var index;cov_2by3hy4vyj.s[83]++;if(list.length>0){cov_2by3hy4vyj.b[15][0]++;cov_2by3hy4vyj.s[84]++;for(var i=(cov_2by3hy4vyj.s[85]++,0);i<list.length;i++){cov_2by3hy4vyj.s[86]++;if(list[i].unit===type){cov_2by3hy4vyj.b[16][0]++;//                var dist = (Math.abs(list[i].x - loc.x)) + (Math.abs(list[i].y - loc.y));
var dist=(cov_2by3hy4vyj.s[87]++,movement.get_distance([loc.x,loc.y],[list[i].x,list[i].y]));cov_2by3hy4vyj.s[88]++;if(dist<min_dist){cov_2by3hy4vyj.b[17][0]++;cov_2by3hy4vyj.s[89]++;min_dist=dist;cov_2by3hy4vyj.s[90]++;index=i;}else{cov_2by3hy4vyj.b[17][1]++;}}else{cov_2by3hy4vyj.b[16][1]++;}}cov_2by3hy4vyj.s[91]++;res.x=list[index].x;cov_2by3hy4vyj.s[92]++;res.y=list[index].y;}else{cov_2by3hy4vyj.b[15][1]++;}cov_2by3hy4vyj.s[93]++;return res;};/**
 * Checks map for axis of symmetry
 * 
 * example usage:
 *  var axis = get_axis_of_symmetry(this.getKarboniteMap());
 * 
 * @param {boolean} resourceMap a 2d grid of booleans
 * 
 * @returns {int}   0 for x axis (up and down symmetry), 1 for y axis 
 *                      (left and right symmetry), -1 on error.
 */cov_2by3hy4vyj.s[94]++;exports.get_axis_of_symmetry=function(resourceMap){cov_2by3hy4vyj.f[10]++;var i;var j;var resourceCoordinates=(cov_2by3hy4vyj.s[95]++,[-1,-1]);cov_2by3hy4vyj.s[96]++;for(i=0;i<resourceMap.length;i++){cov_2by3hy4vyj.s[97]++;for(j=0;j<resourceMap.length;j++){cov_2by3hy4vyj.s[98]++;if(resourceMap[j][i]==true){cov_2by3hy4vyj.b[18][0]++;cov_2by3hy4vyj.s[99]++;resourceCoordinates[0]=i;cov_2by3hy4vyj.s[100]++;resourceCoordinates[1]=j;cov_2by3hy4vyj.s[101]++;break;}else{cov_2by3hy4vyj.b[18][1]++;}}cov_2by3hy4vyj.s[102]++;if((cov_2by3hy4vyj.b[20][0]++,j<resourceMap.length)&&(cov_2by3hy4vyj.b[20][1]++,i<resourceMap.length)&&(cov_2by3hy4vyj.b[20][2]++,resourceMap[j][i]==true)){cov_2by3hy4vyj.b[19][0]++;cov_2by3hy4vyj.s[103]++;break;}else{cov_2by3hy4vyj.b[19][1]++;}}var resourceYSymm=(cov_2by3hy4vyj.s[104]++,[resourceMap.length-1-resourceCoordinates[0],resourceCoordinates[1]]);var resourceXSymm=(cov_2by3hy4vyj.s[105]++,[resourceCoordinates[0],resourceMap.length-1-resourceCoordinates[1]]);cov_2by3hy4vyj.s[106]++;if(resourceMap[resourceYSymm[1]][resourceYSymm[0]]==true){cov_2by3hy4vyj.b[21][0]++;cov_2by3hy4vyj.s[107]++;return 1;}else{cov_2by3hy4vyj.b[21][1]++;}cov_2by3hy4vyj.s[108]++;if(resourceMap[resourceXSymm[1]][resourceXSymm[0]]==true){cov_2by3hy4vyj.b[22][0]++;cov_2by3hy4vyj.s[109]++;return 0;}else{cov_2by3hy4vyj.b[22][1]++;}cov_2by3hy4vyj.s[110]++;return-1;};/**
 * Finds possible castle locations
 * 
 * @requires this.get_axis_of_symmetry();
 * 
 * example usage:
 *  var castlePaths = resource.find_possible_castle_locations([this.me.x - 1, 
 *                      this.me.y - 1], this.map, this.fuel_map);
 * 
 * @param {list} origin a list of 2 ints, where list[0] = x, and list[1] = y 
 * @param {boolean} map a 2d array of booleans
 * @param {boolean} resourceMap a 2d array of booleans
 * 
 * @returns {list}  castle location where list[0] = x coord, and list[1] = y coord 
 */cov_2by3hy4vyj.s[111]++;exports.find_possible_castle_locations=function(origin,map,resourceMap){cov_2by3hy4vyj.f[11]++;var result=(cov_2by3hy4vyj.s[112]++,[]);var symm=(cov_2by3hy4vyj.s[113]++,this.get_axis_of_symmetry(resourceMap));cov_2by3hy4vyj.s[114]++;if(symm==1){cov_2by3hy4vyj.b[23][0]++;cov_2by3hy4vyj.s[115]++;result=[map.length-1-origin[0],origin[1]];}else{cov_2by3hy4vyj.b[23][1]++;cov_2by3hy4vyj.s[116]++;if(symm==0){cov_2by3hy4vyj.b[24][0]++;cov_2by3hy4vyj.s[117]++;result=[origin[0],map.length-1-origin[1]];}else{cov_2by3hy4vyj.b[24][1]++;}}cov_2by3hy4vyj.s[118]++;return result;};